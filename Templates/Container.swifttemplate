<% for component in componentCalculator.getAllComponents() { -%>
<%
let order = component.order
let modules = order.filter({ $0.inititializationType == .module })
-%>
class <%=component.name%>Impl: <%=component.name%> {
<% for type in order { -%>
    private let <%=firstLetterLowercased(type.typeName)%>Factory: <%=type.typeName%>Factory
<% } -%>

    init (
    <% for type in modules.enumerated() { -%>
    <%=firstLetterLowercased(type.element.typeName)%>: <%=type.element.typeName-%><% if type.offset != modules.count - 1 { -%>,<% } %>
    <% } _%>
    ) {
    <% for type in modules { -%>
    self.<%=firstLetterLowercased(type.typeName)%>Factory = <%=type.typeName%>Factory(
            <%=firstLetterLowercased(type.typeName)%>: <%=firstLetterLowercased(type.typeName)%>
        )
    <%}%>

    <% for type in order.filter({ $0.inititializationType != .module }) { -%>
    self.<%=firstLetterLowercased(type.typeName)%>Factory = <%=type.typeName%>Factory(
    <% for dep in type.dependencies.enumerated() { -%>
        <%=firstLetterLowercased(dep.element.typeName)%>Factory: <%=firstLetterLowercased(dep.element.typeName)%>Factory<% if dep.offset != type.dependencies.count - 1 { -%>,<% } %>
    <% } -%> 
        ) 
    <% } -%> 
    }
<% for method in component.methods { -%>

    func <%=method.name%>() -> <%=method.typeName%> {
        return self.<%=firstLetterLowercased(method.typeName)%>Factory.get()
    }
<% } -%>
}
<% } -%>
